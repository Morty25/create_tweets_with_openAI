import Head from "next/head";
import { useState, useEffect } from "react";
import { format } from "date-fns";
import SettingsSuggestOutlinedIcon from "@mui/icons-material/SettingsSuggestOutlined";
import {
  Button,
  Stack,
  TextField,
  Typography,
  IconButton,
} from "@mui/material";
import Textarea from "@mui/joy/Textarea";
import { useTheme } from "@mui/material/styles";

import { APIOpenAI } from "./api/openai";
import ModalSettings from "./ModalSettings";
import CardTweet from "./CardTweet";

interface ITweet {
  date: string;
  tweets: string[];
  url: string;
}

const App = () => {
  const theme = useTheme();
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [temperature, setTemperature] = useState<number>(0.5);
  const [frequency_penalty, setFrequency_penalty] = useState<number>(0.8);
  const [presence_penalty, setPresence_penalty] = useState<number>(0);
  const [top_p, setTop_p] = useState<number>(0);
  const [keyApi, setKeyApi] = useState<string>("");
  const [paramN, setParamN] = useState<boolean>(false);
  const [langue, setLangue] = useState<string>("none");

  const [loading, setLoading] = useState<boolean>(false);
  const [tweets, setTweets] = useState<ITweet[]>([]);
  const [urlLie, setUrlLie] = useState<string>("");
  const [article, setArticle] = useState<string>("");
  const caratereMax = urlLie ? 280 : 257;

  useEffect(() => {
    const keyStorage = localStorage.getItem("OpenAIKey");
    if (keyStorage) {
      setKeyApi(keyStorage);
    }
  }, []);

  const getTweet = () => {
    if (article) {
      setLoading(true);
      APIOpenAI.getTweets(
        article,
        caratereMax,
        temperature,
        presence_penalty,
        frequency_penalty,
        top_p,
        keyApi,
        langue
      )
        .then((res: any) => {
          if (res.status === 200) {
            const jsonTweet = JSON.parse(res.data.choices[0].text);
            if (jsonTweet[0].tweet) {
              const date = new Date();
              setTweets([
                {
                  date: `${format(date, "k")}h : ${format(date, "m")}min`,
                  tweets: jsonTweet.map((j: any) => j.tweet),
                  url: urlLie,
                },
                ...tweets,
              ]);
            }
            setLoading(false);
          }
        })
        .catch((e: any) => {
          setLoading(false);
          console.log(e.message, e);
        });
    }
  };

  const getTweetWithN = () => {
    if (article) {
      setLoading(true);
      APIOpenAI.getTweetsWithN(
        article,
        caratereMax,
        temperature,
        presence_penalty,
        frequency_penalty,
        top_p,
        keyApi,
        langue
      )
        .then((res: any) => {
          if (res.status === 200) {
            const date = new Date();
            setTweets([
              {
                date: `${format(date, "k")}h : ${format(date, "m")}min`,
                tweets: res.data.choices.map((j: any) => j.text),
                url: urlLie,
              },
              ...tweets,
            ]);
            setLoading(false);
          }
        })
        .catch((e: any) => {
          setLoading(false);
          console.log(e.message, e);
        });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Stack alignItems="center" width="100%" spacing={4}>
        <Stack
          padding={theme.spacing(4)}
          justifyContent="space-between"
          alignItems="center"
          direction="row"
          width="100%"
        >
          <Stack width="24px" />
          <Typography variant="h4">
            Création de Tweet via Open AI. (GPT3)
          </Typography>
          <IconButton
            color="primary"
            aria-label="settings"
            onClick={() => setOpenModal(true)}
          >
            <SettingsSuggestOutlinedIcon />
          </IconButton>
        </Stack>

        <Stack
          padding={theme.spacing(4)}
          spacing={2}
          width="60%"
          alignItems="center"
        >
          <Typography variant="h5">
            Générez facilement votre contenu pour Twitter
          </Typography>
          <TextField
            placeholder="Votre URL à lier (optionnel)"
            variant="outlined"
            value={urlLie}
            onChange={(e) => setUrlLie(e.target.value)}
            disabled={loading}
            fullWidth
          />
          <Textarea
            placeholder="Saisissez votre contenu texte (article, script, vidéo...)"
            minRows={3}
            variant="outlined"
            color="neutral"
            value={article}
            onChange={(e) => setArticle(e.target.value)}
            disabled={loading}
            sx={{
              width: "100%",
            }}
          />
          <Button
            variant="outlined"
            onClick={paramN ? getTweetWithN : getTweet}
          >
            Obtenir un tweet
          </Button>
        </Stack>

        <Stack
          padding={theme.spacing(4)}
          width="80%"
          justifyContent="center"
          alignItems="center"
        >
          <Typography variant="h5">Vos tweets générés</Typography>
          {loading && <Stack>Loading ...</Stack>}
          {tweets.map((t) => (
            <>
              <Typography sx={{ textAlign: "center" }}>
                Généré à {t.date}
              </Typography>
              <Stack
                direction="row"
                justifyContent="space-around"
                width="100%"
                flexWrap="wrap"
              >
                {t.tweets.map((tweet, index) => (
                  <CardTweet
                    tweet={tweet}
                    url={t.url}
                    key={`${t.date}-${tweet}-${index}`}
                  />
                ))}
              </Stack>
            </>
          ))}
        </Stack>

        <ModalSettings
          state={openModal}
          setState={setOpenModal}
          temperature={temperature}
          setTemperature={setTemperature}
          presence_penalty={presence_penalty}
          setPresence_penalty={setPresence_penalty}
          frequency_penalty={frequency_penalty}
          setFrequency_penalty={setFrequency_penalty}
          top_p={top_p}
          setTop_p={setTop_p}
          keyApi={keyApi}
          setKeyApi={setKeyApi}
          paramN={paramN}
          setParamN={setParamN}
          langue={langue}
          setLangue={setLangue}
        />
      </Stack>
    </>
  );
};

export default App;
